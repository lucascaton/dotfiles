{
  // Place your snippets for ruby here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.

  "bp": {
    "prefix": "bp",
    "body": [
      "binding.pry"
    ],
    "description": "Debug via Pry"
  },

  "enum": {
    "prefix": "enum",
    "body": [
      "# frozen_string_literal: true",
      "",
      "class ${1:EnumName} < EnumerateIt::Base",
      "  associate_values(",
      "    :${2:first_attribute},${0}",
      "  )",
      "end"
    ],
    "description": "EnumerateIt class"
  },

  "exe": {
    "prefix": "exe",
    "body": [
      "#!/usr/bin/env ruby"
    ],
    "description": "Shebang"
  },

  "fsl": {
    "prefix": "fsl",
    "body": [
      "# frozen_string_literal: true"
    ],
    "description": "frozen_string_literal magic comment"
  },

  "pry": {
    "prefix": "pry",
    "body": [
      "require \"pry\"; binding.pry"
    ],
    "description": "Require \"Pry\" and adds an breakpoint"
  },

  "puts": {
    "prefix": "puts",
    "body": [
      "puts \"#{'-' * `tput cols`.to_i}\\n${1:var}\\n#{'-' * `tput cols`.to_i}\""
    ],
    "description": "Highlight your printed text"
  },

  "putss": {
    "prefix": "putss",
    "body": [
      "puts \"#{'-' * `tput cols`.to_i}\\n${1:var}: #{${1}.inspect}\\n#{'-' * `tput cols`.to_i}\""
    ],
    "description": "Highlight your printed variable"
  },

  "str": {
    "prefix": "str",
    "body": [
      "${1:variable} = <<~${2:FOO}.squish",
      "  ${3:This is the first line.}",
      "${2:FOO}"
    ],
    "description": "Heredoc"
  },

  "hef": {
    "prefix": "hef",
    "body": [
      "has_enumeration_for :${1:enum}, with: ${2:class}, required: true,",
      "  create_helpers: true, create_scopes: true"
    ],
    "description": "has_enumeration_for"
  },

  "hl": {
    "prefix": "hl",
    "body": [
      "# ------------------------------------------------------------------------------"
    ],
    "description": "Comment with horizontal line"
  },

  // RSpec

  "spec": {
    "prefix": "spec",
    "body": [
      "RSpec.describe ${1:Class}, type: :${2:model} do",
      "  ${3}",
      "end${0}"
    ],
    "description": "Basic RSpec block"
  },

  "des": {
    "prefix": "des",
    "body": [
      "describe \"${1}\" do",
      "  ${2}",
      "end${0}"
    ],
    "description": "RSpec's describe block"
  },

  "con": {
    "prefix": "con",
    "body": [
      "context \"${1}\" do",
      "  ${2}",
      "end${0}"
    ],
    "description": "RSpec's context block"
  },

  "it": {
    "prefix": "it",
    "body": [
      "it \"${1}\" do",
      "  ${2}",
      "end${0}"
    ],
    "description": "RSpec's it block"
  },

  "i": {
    "prefix": "i",
    "body": [
      "it \"${1}\" { ${2} }${0}"
    ],
    "description": "RSpec's it inline block"
  },

  "be": {
    "prefix": "be",
    "body": [
      "before do",
      "  ${1}",
      "end${0}"
    ],
    "description": "RSpec's before block"
  },

  "b": {
    "prefix": "b",
    "body": [
      "before { ${1} }${0}"
    ],
    "description": "RSpec's before inline block"
  },

  // Rails

  "defall": {
    "prefix": "defall",
    "body": [
      "class ${1:ModelName}sController < ApplicationController",
      "  before_action :set_${1/(.*)/${1:/downcase}/}, only: %i[show edit update destroy]",
      "",
      "  def index",
      "    @${1/(.*)/${1:/downcase}/}s = ${1}.all",
      "  end",
      "",
      "  def show",
      "  end",
      "",
      "  def new",
      "    @${1/(.*)/${1:/downcase}/} = ${1}.new",
      "  end",
      "",
      "  def edit",
      "  end",
      "",
      "  def create",
      "    @${1/(.*)/${1:/downcase}/} = ${1}.new(${1/(.*)/${1:/downcase}/}_params)",
      "",
      "    if @${1/(.*)/${1:/downcase}/}.save",
      "      redirect_to @${1/(.*)/${1:/downcase}/}, notice: \"${1} has been successfully created.\"",
      "    else",
      "      flash.now[:error] = @${1/(.*)/${1:/downcase}/}.errors.full_messages.to_sentence",
      "      render :new",
      "    end",
      "  end",
      "",
      "  def update",
      "    if @${1/(.*)/${1:/downcase}/}.update(${1/(.*)/${1:/downcase}/}_params)",
      "      redirect_to @${1/(.*)/${1:/downcase}/}, notice: \"${1} has been successfully updated.\"",
      "    else",
      "      flash.now[:error] = @${1/(.*)/${1:/downcase}/}.errors.full_messages.to_sentence",
      "      render :edit",
      "    end",
      "  end",
      "",
      "  def destroy",
      "    @${1/(.*)/${1:/downcase}/}.destroy",
      "",
      "    redirect_to ${1/(.*)/${1:/downcase}/}s_path, notice: \"${1} has been successfully removed.\"",
      "  end",
      "",
      "  private",
      "",
      "  def set_${1/(.*)/${1:/downcase}/}",
      "    @${1/(.*)/${1:/downcase}/} = ${1}.find(params[:id])",
      "  end",
      "",
      "  def ${1/(.*)/${1:/downcase}/}_params",
      "    params.require(:${1/(.*)/${1:/downcase}/}).permit(${2:attributes})",
      "  end",
      "end"
    ],
    "description": "Controller actions"
  }
}
