if [[ "$OSTYPE" == "linux-gnu" ]]; then
  export LANGUAGE=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export RAILS_ENV=production
elif [[ "$OSTYPE" == "darwin"* ]]; then
  export CLICOLOR="auto"
fi

export EDITOR="mvim"
export GEM_EDITOR="mvim"
export ARCHFLAGS="-arch x86_64"
export GREP_OPTIONS="--color=auto"
export GREP_COLOR="1;37;41"

if [[ "$OSTYPE" == "darwin"* ]]; then
  export CC=/usr/local/bin/gcc-4.2
fi

export BLUE="\[\033[0;34m\]"
export NO_COLOR="\[\e[0m\]"
export GRAY="\[\033[1;30m\]"
export GREEN="\[\033[0;32m\]"
export LIGHT_GRAY="\[\033[0;37m\]"
export LIGHT_GREEN="\[\033[1;32m\]"
export LIGHT_RED="\[\033[1;31m\]"
export RED="\[\033[0;31m\]"
export WHITE="\[\033[1;37m\]"
export YELLOW="\[\033[0;33m\]"
export CYAN="\[\033[0;36m\]"
export PURPLE="\[\033[0;35m\]"

# rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# enable programmable completion features (you don't need to enable this, if it's
# already enabled in /etc/bash.bashrc and /etc/profile sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then . /etc/bash_completion; fi

# personal_configs
if [[ -s $HOME/Dropbox/.personal_configs ]] ; then source $HOME/Dropbox/.personal_configs ; fi

# git
alias gl='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %Cblue%an%Creset - %s %Cgreen(%cr)%Creset'\'' --abbrev-commit --date=relative'
alias gs='git status'
alias gd='git diff'
alias gdc='git diff --cached'
alias gds='git diff HEAD^ HEAD'
alias gm='git merge'
alias ga='git add'
alias gaa='git add --all'
alias gai='git add -i'
alias gap='git add -p'
alias gr='git rm'
alias gp='git pull --rebase'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbD='git branch -D'

# rails aliases
alias rs='bundle exec rails s'
alias us='bundle exec unicorn_rails -p 3000'
alias rc='bundle exec rails c'
alias rg='bundle exec rails g'

# rails 2 aliases
alias ss='script/server'
alias sc='script/console --irb=pry'

# others aliases
colorflag="-G"
alias ls="command ls ${colorflag}"
alias l="ls -lhF ${colorflag}" # all files, in long format
alias ll="l"
alias la="ls -laF ${colorflag}" # all files inc dotfiles, in long format
alias lsd='ls -lF ${colorflag} | grep "^d"' # only directories

if [[ "$OSTYPE" == "darwin"* ]]; then
  alias ctags="`brew --prefix`/bin/ctags"
fi

# Quicker navigation
alias ..="cd .."
alias ...="cd ../.."

# bundle
alias rake='bundle exec rake'
alias spec='bundle exec spec'
alias rspec='bundle exec rspec'
alias assets='bundle exec rake assets:clean assets:precompile'
alias foreman='bundle exec foreman'
alias guard='bundle exec guard'
alias cap='bundle exec cap'
alias migrate='bundle exec rake db:migrate db:test:prepare'

# psql
export PGHOST=localhost

function npmls(){
  npm ls --depth=0 "$@" 2>/dev/null
}

function npmlsg(){
  npm ls -g --depth=0 "$@" 2>/dev/null
}

if [[ "$OSTYPE" == "darwin"* ]]; then
  function rm(){
    local path
    for path in "$@"; do
      # ignore any arguments
      if [[ "$path" = -* ]]; then :
      else
        local dst=${path##*/}
        # append the time if necessary
        while [ -e ~/.Trash/"$dst" ]; do
          dst="$dst "$(date +%H-%M-%S)
        done
        mv "$path" ~/.Trash/"$dst"
      fi
    done
  }

  # http://br-mac.org/2013/07/fcd-um-atalho-para-mudar-o-diretorio-corrente-do-terminal-para-a-pasta-aberta-no-finder.html
  fcd(){
    pFinder=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    [ -n "$pFinder" ] && cd "$pFinder"
  pwd
  }
fi

aftermerge(){
  branch=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  git checkout master
  git pull --rebase
  git remote prune origin
  git branch -d $branch

  clear
  git branch -a
}

custom_prompt(){
  history -a
  history -c
  history -r

  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  if [[ "$BRANCH" = "" ]]; then
    BRANCH=`git status 2> /dev/null | grep "On branch" | sed 's/# On branch //'`
  fi

  local RUBY_VERSION=`ruby -e "puts RUBY_VERSION"`

  if [ -f Gemfile.lock ]; then
    local RAILS_VERSION=`cat Gemfile.lock | grep -E " +rails \([0-9]+" | sed 's/ *rails (\(.*\))/\1/'`
  fi

  local RUBY_PROMPT=""
  local STATUS=`git status 2>/dev/null`
  local PROMPT_COLOR=$GREEN
  local STATE=" "
  local NOTHING_TO_COMMIT="# Initial commit"
  local BEHIND="# Your branch is behind"
  local AHEAD="# Your branch is ahead"
  local UNTRACKED="# Untracked files"
  local DIVERGED="have diverged"
  local CHANGED="# Changed but not updated"
  local TO_BE_COMMITED="# Changes to be committed"
  local CHANGES_NOT_STAGED="# Changes not staged for commit"
  local LOG=`git log -1 2> /dev/null`

  if [[ "$RAILS_VERSION" ]]; then
    local RAILS_PROMPT="${RAILS_VERSION}@"
  fi

  RUBY_PROMPT="${GRAY}[${RAILS_PROMPT}${RUBY_VERSION}]${NO_COLOR} "

  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$CHANGES_NOT_STAGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↕${NO_COLOR}"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↓${NO_COLOR}"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↑${NO_COLOR}"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    else
      PROMPT_COLOR=$GREEN
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE}${YELLOW}*${NO_COLOR}"
    fi

    export PS1="${RUBY_PROMPT}${YELLOW}\w${NO_COLOR} (${PROMPT_COLOR}${BRANCH}${NO_COLOR}${STATE}${NO_COLOR})\n\$ "
  else
    export PS1="${RUBY_PROMPT}${YELLOW}\w${NO_COLOR}\n\$ "
  fi
}

export PROMPT_COMMAND=custom_prompt
