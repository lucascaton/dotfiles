ZSH=$HOME/.oh-my-zsh

# Look in ~/.oh-my-zsh/themes/
ZSH_THEME='fletcherm'

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/custom/plugins/)
plugins=(zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

############################################# Export #############################################

export EDITOR='vim'
export GEM_EDITOR='vim'

# Grep
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='1;37;41'

# PostgreSQL
export PGHOST=localhost

case $OSTYPE in
  linux-gnu)
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export RAILS_ENV=production
    [[ -s $HOME/.git-radar ]] && export PATH="$PATH:$HOME/.git-radar"
    ;;
  darwin*)
    export CLICOLOR='auto'
    export ARCHFLAGS='-arch x86_64' # Compilation flags
    ;;
esac

# Ruby
# https://reinteractive.net/posts/266-no-more-bundle-exec-using-the-new-rubygems_gemdeps-environment-variable
# export RUBYGEMS_GEMDEPS=- # This is not ready yet :(

# RVM
export PATH="$PATH:$rvm_path/bin" # Add RVM to PATH for scripting
[[ -s "$rvm_path/scripts/rvm" ]] && source "$rvm_path/scripts/rvm" # Load RVM into a shell session *as a function*

######################################## Personal configs ########################################

if [[ -s $HOME/.personal_configs ]] ;         then source $HOME/.personal_configs ;         fi
if [[ -s $HOME/Dropbox/.personal_configs ]] ; then source $HOME/Dropbox/.personal_configs ; fi

############################################# Alias ##############################################

# Git
alias g='git status'
alias gc='git commit --no-edit'
alias gl='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %Cblue%an%Creset - %s %Cgreen(%cr)%Creset'\'' --abbrev-commit --date=relative'
alias gls='git log --graph --pretty=format:'\''%s'\'' --abbrev-commit --date=relative'
alias gd='git --no-pager diff'
alias gdc='git --no-pager diff --cached'
alias gds='git --no-pager diff HEAD\^ HEAD'
alias gm='git merge --no-edit'
alias ga='git add'
alias gaa='git add --all'
alias gr='git rm'
alias gp='git pull --rebase'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias scorched_earth='git checkout .; git clean -df'

set_rails_aliases_and_functions() {
  alias cap='bundle exec cap'
  alias transpec='transpec -v example_group,hook_scope,stub_with_hash --explicit-spec-type -f spec'
  alias ms='bundle exec middleman server --verbose'

  if [ -f Gemfile.lock ]; then
    # Rails 2
    if [[ "`cat Gemfile.lock | grep -E ' +rails \([0-9]+' | sed 's/ *rails (\(.\).*)/\1/'`" = "2" ]]; then
      alias rs='script/server'
      alias rc='script/console --irb=pry'
      alias rg='script/generate'
      alias spec='bundle exec spec'
      alias rspec='bundle exec spec'
      alias rake='bundle exec rake'
      alias migrate='bundle exec rake db:migrate db:test:prepare'

    # Rails 3+
    else
      rs()      { if [ -f bin/rails ]; then bin/rails s "$@";                        else bundle exec rails s "$@";                        fi }
      rc()      { if [ -f bin/rails ]; then bin/rails c "$@";                        else bundle exec rails c "$@";                        fi }
      rg()      { if [ -f bin/rails ]; then bin/rails g "$@";                        else bundle exec rails g "$@";                        fi }
      rspec()   { if [ -f bin/rspec ]; then bin/rspec   "$@";                        else bundle exec rspec   "$@";                        fi }
      rake()    { if [ -f bin/rake ];  then bin/rake    "$@";                        else bundle exec rake    "$@";                        fi }
      migrate() { if [ -f bin/rake ];  then bin/rake db:migrate db:test:prepare;     else bundle exec rake db:migrate db:test:prepare;     fi }
      assets()  { if [ -f bin/rake ];  then bin/rake assets:clean assets:precompile; else bundle exec rake assets:clean assets:precompile; fi }
    fi
  fi
}

# Others aliases
colorflag="-G"
alias ls="command ls ${colorflag}"
alias l="ls -lhF ${colorflag}" # All files, in long format
alias ll="l"
alias la="ls -laF ${colorflag}" # All files inc dotfiles, in long format
alias agr='ag --ruby'
alias agj='ag --js --coffee'
alias agc='ag --sass --css'
alias agh='ag --html --haml'

case $OSTYPE in
  darwin*)
    alias ctags="`brew --prefix`/bin/ctags"
    alias m="mvim ."
    ;;
esac

alias docker='docker --tlsverify=false'

alias sshkey='cat ~/.ssh/id_rsa.pub | pbcopy && echo "SSH Key copied to clipboard"'

########################################### Functions ############################################

function npmls(){
  npm ls --depth=0 "$@" 2>/dev/null
}

function npmlsg(){
  npm ls -g --depth=0 "$@" 2>/dev/null
}

case $OSTYPE in
  darwin*)
    if [[ "$OSTYPE" == "darwin"* ]]; then
      function rm(){
        local path
        for path in "$@"; do
          # Ignore any arguments
          if [[ "$path" = -* ]]; then :
          else
            local dst=${path##*/}

            # Append the time if necessary
            while [ -e ~/.Trash/"$dst" ]; do
              dst="$dst $RANDOM"
            done

            /bin/mv "$path" ~/.Trash/"$dst"
          fi
        done

        echo ""
      }

      # http://br-mac.org/2013/07/fcd-um-atalho-para-mudar-o-diretorio-corrente-do-terminal-para-a-pasta-aberta-no-finder.html
      fcd(){
        pFinder=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
        [ -n "$pFinder" ] && cd "$pFinder"
      pwd
      }
    fi
    ;;
esac

# Usage: aftermerge <branch> (default: master)
aftermerge(){
  branch=`git branch 2> /dev/null | grep \* | sed 's/* //' | sed 's/(detached from \(.*\))/\1/'`

  git checkout ${1-master}
  git pull --rebase
  git remote prune origin
  git branch -d $branch

  clear
  git branch -a
}

# Convert Ruby 1.8 to 1.9 hash syntax
ruby_new_hash_syntax(){
  perl -pi -e 's/:([\w\d_]+)(\s*)=>/\1:/g' ${1}**/*.rb
}

############################################## PS1 ###############################################

check_last_exit_code() {
  local LAST_EXIT_CODE=$?

  if [[ $LAST_EXIT_CODE -ne 0 ]]; then
    echo "%{$fg_bold[red]%}Exit code: $LAST_EXIT_CODE%{$reset_color%}"
  fi
}

custom_prompt() {
  local RUBY_PROMPT=""

  if type ruby > /dev/null; then
    local RUBY_VERSION=`ruby -e "puts RUBY_VERSION"`

    if [ -f Gemfile.lock ]; then
      local RAILS_VERSION=`cat Gemfile.lock | grep -E ' +rails \([0-9]+' | sed 's/ *rails (\(.*\))/\1/'`
    fi
  fi

  if [[ "$RUBY_VERSION" != "" ]]; then
    if [[ "$RAILS_VERSION" != "" ]]; then
      local RAILS_PROMPT="${RAILS_VERSION}@"
    fi

    RUBY_PROMPT="%{$fg_bold[black]%}[${RAILS_PROMPT}${RUBY_VERSION}] "
  else
    RUBY_PROMPT=""
  fi

  local GIT_RADAR="$(git-radar --zsh --fetch)"

  if [ -d 'spec/' ] && [ `grep -re ':\?focus\(:\| =>\) true' spec --exclude spec/spec_helper.rb --exclude spec/rails_helper.rb | wc -l | awk '{ print $1 }'` != '0' ]; then
    local FOCUS='[RSpec with focus]'
  fi

  export PROMPT="${RUBY_PROMPT}%F{yellow}%~%{$reset_color%}${GIT_RADAR} %F{red}${FOCUS}%{$reset_color%}
\$ "

  export RPROMPT='$(check_last_exit_code)'
}

precmd() { custom_prompt; set_rails_aliases_and_functions }
