############################################## Theme ##############################################

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

ZSH=$HOME/.oh-my-zsh

if [[ "$ITERM_PROFILE" == "Course" ]]; then
  ZSH_THEME='fletcherm'
else
  ZSH_THEME="powerlevel10k/powerlevel10k"
fi

############################################# Plugins #############################################

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/custom/plugins/)
if [[ "$ITERM_PROFILE" != "Course" ]]; then
plugins=(
  zsh-syntax-highlighting
  zsh-autosuggestions
)
fi

######################################### General Settings #########################################

# The following needs to run before oh-my-zsh
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi

source $ZSH/oh-my-zsh.sh

# Making zsh parse calls correctly
# More info: https://github.com/thoughtbot/dotfiles/pull/194/files
unsetopt nomatch

# macOS Sierra has removed the ability to remember your SSH keys across reboot in order to conform
# to mainstream OpenSSH behavior. More info: http://superuser.com/q/1127067/667812
# The following line solves this problem
ssh-add -A &> /dev/null

# Defang naughty commands; the entire history entry is in $1
# http://unix.stackexchange.com/a/312539
function zshaddhistory() {
  if [[ $1 =~ "^ " ]]; then
    return 0
  elif [[ $1 =~ "cp\ *|mv\ *|rm\ *|cat\ *\>|pv\ *|dd\ *" ]]; then
    1="# $1"
  fi
  # write to usual history location
  print -sr -- ${1%%$'\n'}
  # do not save the history line. if you have a chain of zshaddhistory
  # hook functions, this may be more complicated to manage, depending
  # on what those other hooks do (man zshall | less -p zshaddhistory)
  return 1
}

############################################# Export #############################################

HISTSIZE=9999999 # default is 50000
SAVEHIST=$HISTSIZE

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'

case $OSTYPE in
  linux-gnu)
    export EDITOR='vim -f'
    export GEM_EDITOR='vim -f'
    ;;
  darwin*)
    export EDITOR='code --wait' # mvim -f
    export GEM_EDITOR='code --wait' # mvim -f
    ;;
esac

case $OSTYPE in
  darwin*)
    if [ $(uname -m) = "x86_64" ]; then # Intel Macs
      export PATH="/usr/local/bin:/usr/local/sbin:$PATH" # Homebrew
    elif [ $(uname -m) = "arm64" ]; then # Apple Silicon
      export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH" # Homebrew
    fi

    # asdf (multiple runtime versions manager) - https://asdf-vm.com/
    # The following works on both Apple Silicon and Intel Macs
    . $(brew --prefix asdf)/libexec/asdf.sh
    . $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash

    export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
    export PATH="$PATH:$(yarn global bin)" # Yarn global modules
    ;;
esac

# PostgreSQL
export PGHOST=localhost

case $OSTYPE in
  linux-gnu)
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    ;;
  darwin*)
    export CLICOLOR='auto'
    ;;
esac

# GPG
export GPG_TTY=$(tty)

# fzf (key bindings and fuzzy completion) - https://github.com/junegunn/fzf
eval "$(fzf --zsh)"

######################################## Personal configs ########################################

if [ -d $HOME/projects/.personal_configs ]; then
  for file in $HOME/projects/.personal_configs/*; do source $file; done
fi

############################################ Aliases #############################################

if [[ "$ITERM_PROFILE" != "Course" ]]; then
  # Git
  alias g='git status'
  alias gc='git commit --no-edit'
  alias gl='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %Cblue%an%Creset - %s %Cgreen(%cr)%Creset'\'' --abbrev-commit --date=relative'
  alias gls='git log --graph --pretty=format:'\''%s'\'' --abbrev-commit --date=relative --author="`git config --get user.name`"'
  alias gd='git --no-pager diff'
  alias gdc='git --no-pager diff --cached'
  alias gds='git --no-pager diff HEAD\^ HEAD'
  alias gm='git merge --no-edit'
  alias gmu='git fetch upstream && git merge upstream/main'
  alias ga='git add'
  alias gaa='git add --all'
  alias gr='git rm'
  alias gp='git pull origin $(git branch --show-current) --rebase --prune'
  alias gb='git branch'
  alias gba='git branch -a'
  alias gbd='git branch -d'
  alias gbD='git branch -D'
  alias push='git push'
  alias fpush='git push --force-with-lease'
fi

# Ruby / Rails
if [[ "$ITERM_PROFILE" != "Course" ]]; then
  alias be='bundle exec'

  rs() {
    if [ -f bin/dev ]; then
      ./bin/dev
    else
      ./bin/rails s
    fi
  }

  alias rc='bin/rails c'
  alias rg='bin/rails g'

  alias rspec='bundle exec rspec'
  alias rubocop='bundle exec rubocop'
  alias sidekiq='bundle exec sidekiq'
  alias puma='bundle exec puma'
  alias cop='git status --porcelain | awk '\''$1 ~ /A|M/ && $NF ~ /\.rb$/ { print $NF }'\'' | xargs rubocop --force-exclusion'
fi

case $OSTYPE in
  darwin*)
    if [ $(uname -m) = "arm64" ]; then # Apple Silicon
      alias a="arch -x86_64"
    fi

    alias flushdns='sudo killall -HUP mDNSResponder' # https://support.apple.com/en-au/HT202516
    alias simulator="open -a Simulator.app"
    ;;
esac

colorflag="-G"
alias ls="command ls ${colorflag}"
alias l="ls -lhF ${colorflag}" # All files, in long format
alias ll="l"
alias la="ls -laF ${colorflag}" # All files inc dotfiles, in long format

# Sort `ls` output by modification time, displayed in "long iso" format
# https://www.cyberciti.biz/faq/ls-command-sort-the-output-by-last-modified-time-date/
# http://giantdorks.org/alain/make-ls-output-date-in-long-iso-format-instead-of-short-month/
case $OSTYPE in
  linux-gnu)
    alias lsm='ls -l --time-style=long-iso'
    ;;
  darwin*)
    if [ $(uname -m) = "x86_64" ]; then # Intel Macs
      alias lsm='/usr/local/bin/gls -l --time-style=long-iso'
    elif [ $(uname -m) = "arm64" ]; then # Apple Silicon
      alias lsm='/opt/homebrew/bin/gls -l --time-style=long-iso'
    fi
    ;;
esac

alias ag='ag --hidden --ignore-dir .git --ignore-dir node_modules --ignore-dir vendor --ignore=*.min.js'
# ag --list-file-types
alias agr='ag --ruby'
alias agj='ag --js --ts'
alias agc='ag --sass --css'
alias agh='ag --html'
alias agm='ag --markdown'
alias brewski='brew update && brew upgrade && brew cleanup; brew doctor'

if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then
  m() { mvim -p ${1-.} }
fi

alias sshkey='cat ~/.ssh/id_rsa.pub | pbcopy && echo "Your public SSH Key has been copied to the clipboard"'
alias bne='curl wttr.in/brisbane'

alias myip="ipconfig getifaddr $(route -n get default|awk '/interface/ { print $2 }')"

########################################### Functions ############################################

case $OSTYPE in
  linux-gnu)
    alias c='cat'
    ;;
  darwin*)
    c() { /bin/cat -n $* | ccat } # Colorizing `cat` (https://github.com/jingweno/ccat)
    ;;
esac

replace() {
  # Usage: replace foo bar **/*.rb
  # Original function: https://github.com/thoughtbot/dotfiles/blob/master/bin/replace

  find_this="$1"
  shift
  replace_with="$1"
  shift

  items=("${(@f)$(ag -l --nocolor "$find_this" "$@")}")
  temp="${TMPDIR:-/tmp}/replace_temp_file.$$"

  for item in $items; do
    echo âœ“ $item
    sed "s/$find_this/$replace_with/g" "$item" > "$temp" && mv "$temp" "$item"
  done
}

function npmls() {
  npm ls --depth=0 "$@" 2>/dev/null
}

function npmlsg() {
  npm ls -g --depth=0 "$@" 2>/dev/null
}

alias node_modules_folder_sizes='find . -name "node_modules" -type d -prune -print | xargs du -chs'

case $OSTYPE in
  darwin*)
    function rm() {
      local path
      for path in "$@"; do
        # Ignore any arguments
        if [[ "$path" = -* ]]; then :
        else
          local dst=${path##*/}

          # Append the time if necessary
          while [ -e ~/.Trash/"$dst" ]; do
            dst="$dst $RANDOM"
          done

          /bin/mv "$path" ~/.Trash/"$dst"
        fi
      done

      echo ""
    }

    # http://br-mac.org/2013/07/fcd-um-atalho-para-mudar-o-diretorio-corrente-do-terminal-para-a-pasta-aberta-no-finder.html
    fcd() {
      pFinder=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
      [ -n "$pFinder" ] && cd "$pFinder"
      pwd
    }
    ;;
esac

# Command to reset environment after PR merge: switch to default branch, pull changes, clean up
reset_env_after_pr() {
  current_branch=$(git branch --show-current)
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

  git checkout $default_branch # Switch back to the default branch
  git pull origin --rebase --prune # Pulls/rebases changes from the default branch
  git branch -d $current_branch # Deletes the branch used for the merged PR
  git remote prune origin # Removes references to deleted remote branches
  git fetch # Fetches any new branches or commits

  clear

  git branch -a # Display all local and remote branches for convenience
}

# Convert Ruby 1.8 to 1.9 hash syntax
ruby_new_hash_syntax() {
  perl -pi -e 's/:([\w\d_]+)(\s*)=>/\1:/g' ${1}**/*.rb
}

# Git History - http://goo.gl/BzdgE3
gith() {
  if [ "$#" -ne 2 ]; then
    echo "Usage: $0 PATTERN FILE"
    echo
    echo '  Show all of the various changes to a single line in a specified file over the entire' \
         'git history'
    echo
    return 1
  fi

  for c in $(git log -G "$1" --format=%H -- $2); do
    git --no-pager grep -e "$1" $c -- $2
  done
}

hl() {
  theme_folder=`brew --cellar highlight`/`brew list --versions highlight | tr ' ' '\n' | grep -e '^\d' | head -n 1`/share/highlight/themes/

  if ! [ -f $theme_folder/lucascaton.theme ]; then
    cp ~/.dotfiles/other_files/highlight/themes/lucascaton.theme $theme_folder
  fi

  highlight -O rtf $1 --font "Hack Regular Nerd Font Complete" --font-size 48 \
    --src-lang html --style lucascaton # | pbcopy
}

docker-clear() {
  echo "\n>> Before:"
  docker system df

  echo "\n>> Pruning:"
  docker system prune --all --force
  docker volume prune

  echo "\n>> After:\n"
  docker system df
}

# Kill process running on a particular port
killport() {
  kill -9 $(lsof -i:$1 -t)
}

# See details from the process running on a particular port
port() {
  ps aux | grep $(lsof -i:$1 -t) | grep -vi grep
}

############################################## PS1 ###############################################

precmd() {
  if [[ "$ITERM_PROFILE" == "Course" ]]; then
    export PROMPT='%{$fg_no_bold[green]%}%1~ $(git_prompt_info)%{$reset_color%}Â» '
    export RPROMPT=''
    return;
  fi
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
