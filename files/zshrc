ZSH=$HOME/.oh-my-zsh

# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="fletcherm"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)

source $ZSH/oh-my-zsh.sh

############################################# Export #############################################

export EDITOR='vim'
export GEM_EDITOR="vim"

# Grep
export GREP_OPTIONS="--color=auto"
export GREP_COLOR="1;37;41"

# PSQL
export PGHOST=localhost

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  export LANGUAGE=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export RAILS_ENV=production
elif [[ "$OSTYPE" == "darwin"* ]]; then
  export CLICOLOR="auto"
  export ARCHFLAGS="-arch x86_64" # Compilation flags
  # export CC=/usr/local/bin/gcc-4.2
  # export CC=/usr/bin/gcc
fi

# RVM
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# # Bundler
# # https://robots.thoughtbot.com/parallel-gem-installing-using-bundler
# number_of_cores=`sysctl -n hw.ncpu`
# bundle config --global jobs `expr $number_of_cores - 1`

######################################## Personal configs ########################################

if [[ -s $HOME/.personal_configs ]] ;         then source $HOME/.personal_configs ;         fi
if [[ -s $HOME/Dropbox/.personal_configs ]] ; then source $HOME/Dropbox/.personal_configs ; fi

############################################# Alias ##############################################

# Git
alias g='git status'
alias gc='git commit --no-edit'
alias gl='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %Cblue%an%Creset - %s %Cgreen(%cr)%Creset'\'' --abbrev-commit --date=relative'
alias gls='git log --graph --pretty=format:'\''%s'\'' --abbrev-commit --date=relative'
alias gd='git --no-pager diff'
alias gdc='git --no-pager diff --cached'
alias gds='git --no-pager diff HEAD\^ HEAD'
alias gm='git merge --no-edit'
alias ga='git add'
alias gaa='git add --all'
alias gr='git rm'
alias gp='git pull --rebase'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias scorched_earth='git checkout .; git clean -df'

set_rails_aliases_and_functions() {
  alias cap='bundle exec cap'
  alias transpec='transpec -v example_group,hook_scope,stub_with_hash -f spec'

  if [ -f Gemfile.lock ]; then
    # Rails 2
    if [[ "`cat Gemfile.lock | grep -E ' +rails \([0-9]+' | sed 's/ *rails (\(.\).*)/\1/'`" = "2" ]]; then
      rs() { if [ -f script/s ]; then script/s "$@"; else script/server "$@"; fi }
      alias rc='script/console --irb=pry'
      alias rg='script/generate'
      alias spec='bundle exec spec'
      alias rspec='bundle exec spec'
      alias rake='bundle exec rake'
      alias migrate='bundle exec rake db:migrate db:test:prepare'

    # Rails 3+
    else
      rs()      { if [ -f bin/rails ]; then bin/rails s "$@";                        else bundle exec rails s "$@";                        fi }
      rc()      { if [ -f bin/rails ]; then bin/rails c "$@";                        else bundle exec rails c "$@";                        fi }
      rg()      { if [ -f bin/rails ]; then bin/rails g "$@";                        else bundle exec rails g "$@";                        fi }
      rspec()   { if [ -f bin/rspec ]; then bin/rspec   "$@";                        else bundle exec rspec   "$@";                        fi }
      rake()    { if [ -f bin/rake ];  then bin/rake    "$@";                        else bundle exec rake    "$@";                        fi }
      migrate() { if [ -f bin/rake ];  then bin/rake db:migrate db:test:prepare;     else bundle exec rake db:migrate db:test:prepare;     fi }
      assets()  { if [ -f bin/rake ];  then bin/rake assets:clean assets:precompile; else bundle exec rake assets:clean assets:precompile; fi }
    fi
  fi
}

# Others aliases
colorflag="-G"
alias ls="command ls ${colorflag}"
alias l="ls -lhF ${colorflag}" # All files, in long format
alias ll="l"
alias la="ls -laF ${colorflag}" # All files inc dotfiles, in long format
alias t="tail -f log/development.log | grep 'Render\|Process\|Param\|Completed'"

if [[ "$OSTYPE" == "darwin"* ]]; then
  alias ctags="`brew --prefix`/bin/ctags"
  alias m="mvim ."
fi

alias sshkey='cat ~/.ssh/id_rsa.pub | pbcopy && echo "SSH Key copied to clipboard"'

# Quicker navigation
alias ..="cd .."
alias ...="cd ../.."

########################################### Functions ############################################

function npmls(){
  npm ls --depth=0 "$@" 2>/dev/null
}

function npmlsg(){
  npm ls -g --depth=0 "$@" 2>/dev/null
}

if [[ "$OSTYPE" == "darwin"* ]]; then
  function rm(){
    local path
    for path in "$@"; do
      # Ignore any arguments
      if [[ "$path" = -* ]]; then :
      else
        local dst=${path##*/}

        # Append the time if necessary
        while [ -e ~/.Trash/"$dst" ]; do
          dst="$dst $RANDOM"
        done

        /bin/mv "$path" ~/.Trash/"$dst"
      fi
    done

    echo ""
  }

  # http://br-mac.org/2013/07/fcd-um-atalho-para-mudar-o-diretorio-corrente-do-terminal-para-a-pasta-aberta-no-finder.html
  fcd(){
    pFinder=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    [ -n "$pFinder" ] && cd "$pFinder"
  pwd
  }
fi

# Usage: aftermerge <branch> (default: master)
aftermerge(){
  branch=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  git checkout ${1-master}
  git pull --rebase
  git remote prune origin
  git branch -d $branch

  clear
  git branch -a
}

# Convert Ruby 1.8 to 1.9 hash syntax
ruby_new_hash_syntax(){
  perl -pi -e 's/:([\w\d_]+)(\s*)=>/\1:/g' ${1}**/*.rb
}

############################################## PS1 ###############################################

custom_prompt(){
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  if [[ "$BRANCH" = "" ]]; then
    BRANCH=`git status 2> /dev/null | grep "On branch" | sed 's/# On branch //'`
  fi

  if type ruby > /dev/null; then
    local RUBY_VERSION=`ruby -e "puts RUBY_VERSION"`

    if [ -f Gemfile.lock ]; then
      local RAILS_VERSION=`cat Gemfile.lock | grep -E ' +rails \([0-9]+' | sed 's/ *rails (\(.*\))/\1/'`
    fi
  fi

  export GREEN="%{$fg[green]%}"
  export GRAY="%{$FG[007]%}"
  export RED="%{$fg[red]%}"
  export YELLOW="%{$fg[yellow]%}"
  export NO_COLOR="%{$reset_color%}"

  local RUBY_PROMPT=""
  local STATUS="$(git status 2>/dev/null)"
  local PROMPT_COLOR=$GREEN
  local STATE=" "
  local NOTHING_TO_COMMIT="# Initial commit"
  local BEHIND="# Your branch is behind"
  local AHEAD="# Your branch is ahead"
  local UNTRACKED="# Untracked files"
  local DIVERGED="have diverged"
  local CHANGED="# Changed but not updated"
  local TO_BE_COMMITED="# Changes to be committed"
  local CHANGES_NOT_STAGED="# Changes not staged for commit"
  local LOG="$(git log -1 2> /dev/null)"

  if [ -d 'spec/' ] && [ `grep -re ':\?focus\(:\| =>\) true' spec --exclude spec/spec_helper.rb --exclude spec/rails_helper.rb | wc -l | awk '{ print $1 }'` != '0' ]; then
    local FOCUS='[RSpec with focus]'
  fi

  if [[ "$RUBY_VERSION" != "" ]]; then
    if [[ "$RAILS_VERSION" != "" ]]; then
      local RAILS_PROMPT="${RAILS_VERSION}@"
    fi

    RUBY_PROMPT="${GRAY}[${RAILS_PROMPT}${RUBY_VERSION}]${NO_COLOR} "
  else
    RUBY_PROMPT=""
  fi

  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$CHANGES_NOT_STAGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↕${NO_COLOR}"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↓${NO_COLOR}"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↑${NO_COLOR}"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_COLOR=$RED
      STATE="*"
    else
      PROMPT_COLOR=$GREEN
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE}${YELLOW}*${NO_COLOR}"
    fi

    export PROMPT="${RUBY_PROMPT}${YELLOW}%~${NO_COLOR} (${PROMPT_COLOR}${BRANCH}${NO_COLOR}${STATE}) ${RED}${FOCUS}${NO_COLOR}
\$ "
  else
    export PROMPT="${RUBY_PROMPT}${YELLOW}%~${NO_COLOR}
\$ "
  fi

  export RPROMPT=""
}

precmd() { custom_prompt; set_rails_aliases_and_functions }
