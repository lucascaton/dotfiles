rails = File.join(Dir.getwd, 'config', 'environment.rb')

if File.exist?(rails) && ENV['SKIP_RAILS'].nil?
  require rails

  if Rails.version[0..0] == '2'
    require 'console_app'
    require 'console_with_helpers'
    ActiveRecord::Base.connection.instance_variable_set :@logger, Logger.new(STDOUT)
  elsif %w(3 4).include?(Rails.version[0..0])
    Pry.config.editor = 'mvim -v'

    Pry.config.prompt = proc do |obj, level, _|
      prompt = ''
      prompt << "#{Rails.version}@" if defined?(Rails)
      prompt << "#{RUBY_VERSION}"
      "#{prompt} (#{obj.to_s[0..30]})> "
    end

    Pry.config.exception_handler = proc do |output, exception, _|
      output.puts "\e[31m#{exception.class}: #{exception.message}"
      output.puts "from #{exception.backtrace.first}\e[0m"
    end

    if defined?(Rails) && (Rails.version[0..0] == '4' || Rails.version[0..2] == '3.2')
      %w(rails/console/app rails/console/helpers).each { |f| require f }
      TOPLEVEL_BINDING.eval('self').extend ::Rails::ConsoleMethods
    end

    def fg
      puts 'Loading FactoryGirl...'
      require 'factory_girl'

      begin
        puts 'Loading Faker...'
        require 'faker'
      rescue LoadError
        puts 'faker not found'
      end

      FactoryGirl.factories.clear

      factory_girl_paths = ['spec/factories.rb', 'spec/support/factories.rb', *Dir['spec/factories/**/*.rb']]

      factory_girl_paths.each do |path|
        file = File.join(Rails.root, path)
        load(File.join(Rails.root, path)) if File.exist?(file)
      end

      true
    end

    begin
      require 'awesome_print'
      Pry.config.print = proc { |output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output) }
    rescue LoadError => err
      warn "=> Unable to load awesome_print (#{err})"
    end
  else
    warn '[WARN] cannot load Rails console commands (Not on Rails 2, 3 or 4?)'
  end
end
